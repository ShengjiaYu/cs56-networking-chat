

2012-06-08 15:27 src/edu/ucsb/cs56/S12/maxhinson/chatclient/controller/ClientController.java Page 1


    1	package edu.ucsb.cs56.S12.maxhinson.chatclient.controller;
    2	
    3	import edu.ucsb.cs56.S12.maxhinson.chatclient.model.Client;
    4	import edu.ucsb.cs56.S12.maxhinson.chatclient.model.Contact;
    5	import edu.ucsb.cs56.S12.maxhinson.chatclient.view.ClientWindow;
    6	
    7	/**
    8	 * ClientController class controlls the communication between client view and client model
    9	 * @author Peng Wang, Andro Stotts, Bryce Filler, Max Hinson
   10	 * @version 0.4
   11	 */
   12	public class ClientController {
   13	    private Client client;
   14	    private static ClientController controller;
   15		
   16	    /**
   17	     * Constructor saves a instance of a client object
   18	     */
   19	    private ClientController(){
   20		client = Client.getClient();
   21	    }
   22		
   23	    /**
   24	     * Gets instance of ClientController
   25	     * @return instance of ClientController
   26	     */
   27	    public static ClientController getController(){
   28		if(controller == null)
   29		    controller = new ClientController();
   30		return controller;
   31	    }
   32	
   33	    /**
   34	     * sets the nickname of the client from the controller
   35	     */
   36	    public void setNickname(String nickname){
   37		client.setNickname(nickname);
   38	    }
   39	
   40	    /**
   41	     * controller gets nickname from Client
   42	     */
   43	    public String getNickname(){
   44		return client.getNickname();
   45	    }
   46	
   47	    /**
   48	     * sets the client's sound status
   49	     */
   50	    public void setSound(boolean soundOn){
   51		client.setSound(soundOn);
   52	    }
   53	
   54	    /**
   55	     * controller gets the sound status from Client
   56	     */







2012-06-08 15:27 src/edu/ucsb/cs56/S12/maxhinson/chatclient/controller/ClientController.java Page 2


   57	    public boolean isSoundOn(){
   58		return client.isSoundOn();
   59	    }
   60	
   61	
   62	    /**
   63	     * Connects to the server
   64	     * @param ip Server IP address
   65	     * @param name username
   66	     * @param password password of the user
   67	     * @return true when the username and password are valid, otherwise return false
   68	     */
   69	    public int connectServer(String ip, String name, String password){
   70		return client.connectServer(ip, name, password);
   71	    }
   72	
   73	    /**
   74	     * Displays a message on the client window
   75	     * @param msg message to display on client window
   76	     */
   77	    public void displayMsg(String msg){
   78		ClientWindow.getWindow().getTaOutput().append(msg);
   79		ClientWindow.getWindow().getTaOutput().setCaretPosition(ClientWindow.getWindow().getTaOutput().getDocument().getLength());
   80	    }
   81		
   82	    /**
   83	     * Sends a message to the server
   84	     * @param s message being send to the server
   85	     */
   86	    public void sendMsg2Server(String s){
   87		client.sendMsg(s);
   88	    }
   89		
   90	    /**
   91	     * Initiated the contact list and return contact list to the client window
   92	     * @return contact names
   93	     */
   94	    public String[] getContacts(){
   95		Contact[] contacts = new Contact[5];
   96		String[] names = new String[5];
   97		for(int i = 0; i < 5; i++){
   98		    contacts[i] = new Contact("contact" + i);
   99		    names[i] = contacts[i].getName();
  100		}
  101		return names;
  102	    }
  103		
  104	    /**
  105	     * Update the contact list
  106	     * @param contact an array of strings represents a contact list
  107	     */
  108	    public void updateContactList(String[] contact){
  109		ClientWindow.getWindow().getContactList().setListData(contact);
  110	    }
  111	}








2012-06-01 15:29 src/edu/ucsb/cs56/S12/maxhinson/chatclient/controller/RunClient.java Page 1


    1	package edu.ucsb.cs56.S12.maxhinson.chatclient.controller;
    2	
    3	import edu.ucsb.cs56.S12.maxhinson.chatclient.view.ClientWindow;
    4	
    5	/**
    6	 * Application class represent the entrance of the program
    7	 * @author Peng Wang, Andro Stotts, Bryce Filler, Max Hinson
    8	 * @version 0.4
    9	 */
   10	public class RunClient {
   11		public static void main(String[] args){
   12			ClientWindow window = ClientWindow.getWindow();
   13			window.launchLoginWindow();
   14		}
   15	}
















































2012-06-01 15:29 src/edu/ucsb/cs56/S12/maxhinson/chatclient/junit/ClientTest.java Page 1


    1	package edu.ucsb.cs56.S12.maxhinson.chatclient.junit;
    2	
    3	import static org.junit.Assert.*;
    4	import org.junit.Test;
    5	import edu.ucsb.cs56.S12.maxhinson.chatclient.model.Client;
    6	
    7	public class ClientTest {
    8	
    9		/**
   10		 * Tests the return of getClient() to see if it is an object of the Client class
   11		 */
   12		@Test
   13		public void testGetClient() {
   14			Client client = Client.getClient();
   15			assertEquals(Client.class, client.getClass());
   16		}
   17	
   18		@Test
   19		public void testGetName() {
   20			Client client = Client.getClient();
   21			client.setUserName("Peng Wang");
   22			assertEquals("Peng Wang", client.getUserName());
   23		}
   24	
   25	        @Test
   26		public void testgetNickname() {
   27			Client client = Client.getClient();
   28			client.setNickname("Peng Wang");
   29			assertEquals("Peng Wang", client.getNickname());
   30		}
   31	
   32	
   33	
   34		@Test
   35		public void testGetServerIP() {
   36			Client client = Client.getClient();
   37			client.setServerIP("127.0.0.1");
   38			assertEquals("127.0.0.1", client.getServerIP());
   39		}
   40	
   41		@Test
   42		public void testGetClientIP() {
   43			Client client = Client.getClient();
   44			client.setClientIP("127.0.0.1");
   45			assertEquals("127.0.0.1", client.getClientIP());
   46		}
   47	
   48		@Test
   49		public void testConnectServer() {
   50			Client client = Client.getClient();
   51			assertEquals(8, client.connectServer("127.0.0.1", "Peng Wang", "abc123"));
   52		}
   53		
   54		@Test
   55		public void testParseContactList() {
   56			Client client = Client.getClient();







2012-06-01 15:29 src/edu/ucsb/cs56/S12/maxhinson/chatclient/junit/ClientTest.java Page 2


   57			String[] strs = client.parseContactList("Peng Wang:Andro Stotts:Phillp Conrad");
   58			assertEquals("Broadcast", strs[0]);
   59			assertEquals("Phillp Conrad", strs[3]);
   60			
   61		}
   62	
   63		@Test
   64		public void testParseReceivingMsg() {
   65			Client client = Client.getClient();
   66			String[] strs = client.parseReceivingMsg("Hello World!&1001");
   67			assertEquals("1001", strs[1]);
   68			assertEquals("Hello World!", strs[0]);
   69		}
   70	
   71	
   72	}















































2012-06-01 15:29 src/edu/ucsb/cs56/S12/maxhinson/chatclient/junit/ContactTest.java Page 1


    1	package edu.ucsb.cs56.S12.maxhinson.chatclient.junit;
    2	
    3	import static org.junit.Assert.*;
    4	
    5	import org.junit.Test;
    6	
    7	import edu.ucsb.cs56.S12.maxhinson.chatclient.model.Contact;
    8	
    9	public class ContactTest {
   10	
   11		@Test
   12		public void testGetName() {
   13			Contact c = new Contact();
   14			c.setName("Peng Wang");
   15			assertEquals("Peng Wang", c.getName());
   16		}
   17	
   18	}













































2012-06-08 14:54 src/edu/ucsb/cs56/S12/maxhinson/chatclient/model/AePlayWave.java Page 1


    1	package edu.ucsb.cs56.S12.maxhinson.chatclient.model;
    2	
    3	import java.io.File; 
    4	import java.io.IOException; 
    5	import javax.sound.sampled.AudioFormat; 
    6	import javax.sound.sampled.AudioInputStream; 
    7	import javax.sound.sampled.AudioSystem; 
    8	import javax.sound.sampled.DataLine; 
    9	import javax.sound.sampled.FloatControl; 
   10	import javax.sound.sampled.LineUnavailableException; 
   11	import javax.sound.sampled.SourceDataLine; 
   12	import javax.sound.sampled.UnsupportedAudioFileException; 
   13	import java.net.URL; 
   14	
   15	/** Class from anyexample.com of playing Sound File Asychronously
   16	  
   17	   From the original website's description (found at
   18	   <a href="http://www.anyexample.com/programming/java/java_play_wav_sound_file.xml">http://www.anyexample.com/programming/java/java_play_wav_sound_file.xml</a>
   19	   )
   20	
   21	   "Our class extends Java Thread class to be asynchronous. There are two
   22	   constructors - AePlayWave(String wavfile) with has only one argument -
   23	   file name, and AePlayWave(String wavfile, Position p), which takes
   24	   file name and Position constant, either Position.LEFT or
   25	   Position.RIGHT -- this is simple balance control, which can toggle
   26	   only left or right channel of stereo sound (useful for storing two
   27	   different sounds in single wave file).
   28	   
   29	   Various javax.sound.sampled classes are used to prepare audio input
   30	   stream and audio data line. Afterwards, we simply read and write
   31	   (through 512Kb buffer, which is suitable for most formats) sound data
   32	   from file to sound device.
   33	
   34	
   35	  @author Adapted from http://www.anyexample.com/programming/java/java_play_wav_sound_file.xml
   36	  @author P. Conrad (adapted to get resources from JAR file)
   37	  @version Retrieved by P. Conrad on 06/03/2012
   38	
   39	 */
   40	
   41	public class AePlayWave extends Thread { 
   42	 
   43	    private String filename;
   44	 
   45	    private Position curPosition;
   46	 
   47	    private final int EXTERNAL_BUFFER_SIZE = 524288; // 128Kb 
   48	 
   49	    enum Position { 
   50	        LEFT, RIGHT, NORMAL
   51		    };
   52	 
   53	    public AePlayWave(String wavfile) { 
   54	        filename = wavfile;
   55	        curPosition = Position.NORMAL;
   56	    } 







2012-06-08 14:54 src/edu/ucsb/cs56/S12/maxhinson/chatclient/model/AePlayWave.java Page 2


   57	 
   58	    public AePlayWave(String wavfile, Position p) { 
   59	        filename = wavfile;
   60	        curPosition = p;
   61	    } 
   62	 
   63	    public void run() { 
   64	 
   65		String fullFileName = "/resources/" + filename;
   66	
   67		URL url = null;
   68		try {
   69		    url = getClass().getResource(fullFileName);
   70		} catch (Exception e) {
   71	            e.printStackTrace();
   72	            return;
   73		}
   74	
   75		if (url==null) {
   76		    System.err.println("Error: " + fullFileName + " could not be found through getClass().getResource() (i.e. in the JAR file or classpath)");
   77		    return;
   78		}
   79		
   80	        AudioInputStream audioInputStream = null;
   81	        try { 
   82	            audioInputStream = AudioSystem.getAudioInputStream(url);
   83	        } catch (UnsupportedAudioFileException e1) { 
   84	            e1.printStackTrace();
   85	            return;
   86	        } catch (IOException e1) { 
   87	            e1.printStackTrace();
   88	            return;
   89	        } 
   90	 
   91	        AudioFormat format = audioInputStream.getFormat();
   92	        SourceDataLine auline = null;
   93	        DataLine.Info info = new DataLine.Info(SourceDataLine.class, format);
   94	 
   95	        try { 
   96	            auline = (SourceDataLine) AudioSystem.getLine(info);
   97	            auline.open(format);
   98	        } catch (LineUnavailableException e) { 
   99	            e.printStackTrace();
  100	            return;
  101	        } catch (Exception e) { 
  102	            e.printStackTrace();
  103	            return;
  104	        } 
  105	 
  106	        if (auline.isControlSupported(FloatControl.Type.PAN)) { 
  107	            FloatControl pan = (FloatControl) auline
  108			.getControl(FloatControl.Type.PAN);
  109	            if (curPosition == Position.RIGHT) 
  110	                pan.setValue(1.0f);
  111	            else if (curPosition == Position.LEFT) 
  112	                pan.setValue(-1.0f);







2012-06-08 14:54 src/edu/ucsb/cs56/S12/maxhinson/chatclient/model/AePlayWave.java Page 3


  113	        } 
  114	 
  115	        auline.start();
  116	        int nBytesRead = 0;
  117	        byte[] abData = new byte[EXTERNAL_BUFFER_SIZE];
  118	 
  119	        try { 
  120	            while (nBytesRead != -1) { 
  121	                nBytesRead = audioInputStream.read(abData, 0, abData.length);
  122	                if (nBytesRead >= 0) 
  123	                    auline.write(abData, 0, nBytesRead);
  124	            } 
  125	        } catch (IOException e) { 
  126	            e.printStackTrace();
  127	            return;
  128	        } finally { 
  129	            auline.drain();
  130	            auline.close();
  131	        } 
  132	 
  133	    } 
  134	} 









































2012-06-08 16:06 src/edu/ucsb/cs56/S12/maxhinson/chatclient/model/Client.java Page 1


    1	package edu.ucsb.cs56.S12.maxhinson.chatclient.model;
    2	
    3	import java.io.DataInputStream;
    4	import java.io.DataOutputStream;
    5	import java.io.IOException;
    6	import java.net.Socket;
    7	import java.net.SocketException;
    8	
    9	
   10	
   11	import javax.sound.sampled.AudioFormat;
   12	import javax.sound.sampled.AudioInputStream;
   13	import javax.sound.sampled.AudioSystem;
   14	import javax.sound.sampled.DataLine;
   15	import javax.sound.sampled.LineUnavailableException;
   16	import javax.sound.sampled.SourceDataLine;
   17	
   18	
   19	import edu.ucsb.cs56.S12.maxhinson.chatclient.controller.ClientController;
   20	
   21	/**
   22	 * Represents a client who can connect/disconnect to the server 
   23	 * and chat with other people on the server  
   24	 * @author Peng Wang, Andro Stotts, Bryce Filler, Max Hinson
   25	 * @version 0.4
   26	 */
   27	public class Client {
   28	    private static Client client;
   29	    private ClientController controller;
   30	    private int portNumber = 8888;
   31	
   32	    private String userName;
   33	    private String nickName;
   34	    private String serverIP;
   35	    private String clientIP;
   36	    private String[] contactList;
   37	
   38	    private Socket mySocket;
   39	
   40	    private DataOutputStream dos;
   41	    private DataInputStream dis;
   42	
   43	    private boolean isConnected;
   44	
   45	    private boolean soundOn = true;
   46	
   47	    /**
   48	     * Initialize instance variables
   49	     */
   50	    private Client(){
   51		userName = "";
   52		nickName = "";
   53		serverIP = "";
   54		clientIP = "";
   55		mySocket = null;
   56		dos = null;







2012-06-08 16:06 src/edu/ucsb/cs56/S12/maxhinson/chatclient/model/Client.java Page 2


   57		dis = null;
   58		isConnected = false;
   59		contactList = null;
   60	    }
   61		
   62	    /**
   63	     * getClient method is used for get a client object
   64	     * @return instance of Client
   65	     */
   66	    public static Client getClient(){
   67		if(client == null)
   68		    client = new Client();
   69		return client;
   70	    }
   71		
   72	    /**
   73	     * setuserName method is used for setting user's userName
   74	     * @param userName the user's userName
   75	     */
   76	    public void setUserName(String userName){
   77		this.userName = userName;
   78	    }
   79	
   80	    /**
   81	
   82	     * setnickName method is used for setting user's nickName
   83	     * @param nickName the user's nickName
   84	     */
   85	    public void setNickname(String nickName){
   86		this.nickName = nickName;
   87	    }
   88		
   89		
   90	    /**
   91	     * getuserName method is used for getting the user's userName of a Client object
   92	     * @return userName the user's userName
   93	     */
   94	    public String getUserName(){
   95		return userName;
   96	    }
   97	
   98	    /**
   99	     * getnickName method is used for getting the user's nickName of a Client object
  100	     * @return nickName the user's nickName
  101	     */
  102	    public String getNickname(){
  103		return nickName;
  104	    }
  105	
  106		
  107	    /**
  108	     * setServerIP method is used for setting the IP address which the client is connecting 
  109	     * @param serverIP the IP address of the server
  110	     */
  111	    public void setServerIP(String serverIP){
  112		this.serverIP = serverIP;







2012-06-08 16:06 src/edu/ucsb/cs56/S12/maxhinson/chatclient/model/Client.java Page 3


  113	    }
  114		
  115	    /**
  116	     * getServerIP returns the server IP address which the client is connecting
  117	     * @return the server's IP address
  118	     */
  119	    public String getServerIP(){
  120		return serverIP;
  121	    }
  122		
  123	    /**
  124	     * setClientIP is used for setting up 
  125	     * @param clientIP the IP address of the client
  126	     */
  127	    public void setClientIP(String clientIP){
  128		this.clientIP = clientIP;
  129	    }
  130		
  131	    /**
  132	     * get the client IP address
  133	     * @return clientIP the IP address of the client
  134	     */
  135	    public String getClientIP(){
  136		return clientIP;
  137	    }
  138	
  139	    /**
  140	     * get the sound status
  141	     * @return soundOn whether the client's sound is on
  142	     */
  143	    public boolean isSoundOn(){
  144		return soundOn;
  145	    }
  146	
  147	    /**
  148	     * set the sound status
  149	     * @param soundOn set the client's sound status
  150	     */
  151	    public void setSound(boolean soundOn){
  152		this.soundOn = soundOn;
  153	    }
  154		
  155	    /**
  156	     * ConnectServer method takes server IP address parameter to connect the specific
  157	     * server and takes client userName and password in order to check login authority 
  158	     * @param IP Server IP address
  159	     * @param userName userName
  160	     * @param password user's password associate with the useruserName
  161	     * @return boolean true when useruserName and password are valid, otherwise false
  162	     */	
  163			
  164	    public int connectServer(String IP, String userName, String password){
  165		//save the userName and IP address of client
  166		this.setUserName(userName);
  167		this.setServerIP(IP);
  168		controller = ClientController.getController();







2012-06-08 16:06 src/edu/ucsb/cs56/S12/maxhinson/chatclient/model/Client.java Page 4


  169		try {
  170		    //create a new socket and connect to IP address at socket 8888
  171		    //get the input and output stream wrapped with DataOutput/InputStream
  172		    mySocket = new Socket(serverIP, portNumber);
  173		    dos = new DataOutputStream(mySocket.getOutputStream());
  174		    dis = new DataInputStream(mySocket.getInputStream());
  175				
  176		    int result = checkAuthority(userName + "&" + password);
  177		    //check login authority
  178		    if(result == 0){
  179			controller.displayMsg(userName + " has connected to the server at " + serverIP + '\n');
  180			isConnected = true;
  181			new Thread(new RecieveMsg()).start();
  182			//if valid useruserName and password, return 1
  183			return 0;
  184		    }
  185		    //if useruserName or password wrong
  186		    else if(result == 1){
  187			return 1;
  188		    }
  189		    //if user logged in already
  190		    else if(result == 2)
  191			return 2;
  192		    //if server is down
  193		    else
  194			return 9;
  195		} catch (IOException e) {
  196		    //if IP address not valid
  197		    return 8;
  198		}
  199	    }
  200		
  201	    /**
  202	     * disconnectServer method is used for disconnecting the client with the server
  203	     */
  204	    public void disconnectServer(){
  205			
  206	    }
  207		
  208	    /**
  209	     * checkAuthority method is used for checking if the useruserName and password are valid
  210	     * @param s the combination of useruserName and password
  211	     * @return boolean true when the server returns null, otherwise false
  212	     */
  213	
  214			
  215	    public int checkAuthority(String s){
  216		String result = "";
  217		try {
  218		    //write userName and password to the server and read result from the server
  219		    this.sendMsg(s);
  220				
  221		    //get the contact list from the server and update the contact list of client window
  222		    result = dis.readUTF();
  223		    String[] temp = parseReceivingMsg(result);
  224				







2012-06-08 16:06 src/edu/ucsb/cs56/S12/maxhinson/chatclient/model/Client.java Page 5


  225		    if(result.equals("Wrong username or password")){			
  226			return 1;
  227		    }		
  228		    else if(result.equals("This user has logged in already")){
  229			return 2;
  230		    }
  231		    else if (result.equals("No name was entered")){
  232			return 3;
  233		    }
  234		    else{
  235			contactList = parseContactList(temp[0]);
  236			controller.updateContactList(contactList);
  237			return 0;
  238		    }
  239					
  240		} catch (IOException e) {
  241		    controller.displayMsg("Error occured when sending message to the server\n");
  242		    return 9;
  243		}
  244	    }
  245		
  246	    /**
  247	     * Parse the contact list
  248	     * @param s a contact list represented by a string (eg. "Peng Wang:Andro Stotts")
  249	     * @return array of strings that has contact userNames seperated
  250	     */
  251	    public String[] parseContactList(String s){	
  252		String[] temp = s.split(":");
  253		String[] temp2 = new String[temp.length+1];
  254		//add the broadcast to all option to the contact list
  255		temp2[0] = "Broadcast";
  256		for(int i = 1; i < temp.length+1; i++)
  257		    temp2[i] = temp[i-1];
  258		return temp2;
  259	    }
  260		
  261	    /**
  262	     * Parse the receiving message from the server
  263	     * @param s received message
  264	     * @return array of strings
  265	     */
  266	    public String[] parseReceivingMsg(String s){
  267		String[] temp = null;
  268		if(s.contains("&")){
  269		    int index = s.lastIndexOf("&");
  270		    String msg = s.substring(0, index);
  271		    String c = s.substring(index+1, s.length());
  272		    String[] str = {msg, c};
  273		    temp = str;
  274		}
  275		return temp;
  276	    }
  277		
  278	    /**
  279	     * sendMsg is the method that used for send a text message to the server
  280	     * @param s text message







2012-06-08 16:06 src/edu/ucsb/cs56/S12/maxhinson/chatclient/model/Client.java Page 6


  281	     */
  282	    public void sendMsg(String s){
  283		try {
  284		    dos.writeUTF(s);
  285		} catch (IOException e) {
  286		    controller.displayMsg("Error occured when sending message to the server\n");
  287		}
  288	    }
  289		
  290	    /**
  291	     * RecieveMsg class represent a seperate thread that constantly recieving message from the server
  292	     * @author Peng Wang and Andro Stotts
  293	     * @version 0.4
  294	     */
  295	    class RecieveMsg implements Runnable{
  296		public void run() {
  297		    try{
  298			while(isConnected){
  299			    String msg = dis.readUTF();
  300			    String[] strs = parseReceivingMsg(msg);
  301			    //client go online
  302			    if(strs[1].equals("1002")){
  303				for(int i = 0; i < contactList.length; i++){
  304				    if(contactList[i].equals(strs[0])){
  305					contactList[i] += "(Online)";
  306					controller.updateContactList(contactList);
  307					//play a sound
  308					if(soundOn)
  309					    {
  310						AePlayWave onlineSound = new AePlayWave("OhYeah.aiff");
  311						onlineSound.start();
  312					    }
  313					break;
  314				    }
  315				}
  316			    }
  317			    //client go offline
  318			    else if(strs[1].equals("1003")){
  319				for(int i = 0; i < contactList.length; i++){
  320				    if(contactList[i].equals(strs[0]+"(Online)")){
  321					contactList[i] = strs[0];
  322					controller.updateContactList(contactList);
  323					//play a sound
  324					if(soundOn)
  325					    {
  326						AePlayWave offlineSound = new AePlayWave("HitWallObs.aiff");
  327						offlineSound.start();
  328					    }
  329					break;
  330				    }
  331				}
  332			    }
  333			    //update the contact's nickname
  334			    else if(strs[1].equals("1006")){
  335				String[] nicknames = strs[0].split(":");
  336				for(int i = 0; i < contactList.length; i++){







2012-06-08 16:06 src/edu/ucsb/cs56/S12/maxhinson/chatclient/model/Client.java Page 7


  337				    if(contactList[i].equals(nicknames[0] + "(Online)")){
  338					contactList[i] = nicknames[1] + "(Online)";
  339					controller.updateContactList(contactList);
  340					controller.displayMsg(nicknames[0] + "'s nickname has been changed to " + nicknames[1] + "\n");
  341					break;
  342				    }
  343				}
  344			    }
  345			    else if(strs[1].equals("1007")){
  346				controller.setNickname(strs[0]);
  347			    }
  348			    else if(strs[1].equals("1001")){
  349				// display the incoming message
  350				controller.displayMsg(strs[0] + '\n');
  351				//play a sound
  352				if(soundOn)
  353				    {
  354					AePlayWave msgSound = new AePlayWave("Glass.aiff");
  355					msgSound.start();
  356				    }
  357			    }
  358			}
  359		    } catch (SocketException e){
  360			controller.displayMsg("The server has shutdown\n");
  361		    } catch(IOException e){
  362			controller.displayMsg("You have been kicked from the server.\n");
  363		    }
  364		}		
  365	    }
  366		
  367	}
































2012-06-01 15:30 src/edu/ucsb/cs56/S12/maxhinson/chatclient/model/Contact.java Page 1


    1	package edu.ucsb.cs56.S12.maxhinson.chatclient.model;
    2	
    3	/**
    4	* Represents a contact in the client's contact list
    5	* @author Peng Wang, Andro Stotts, Bryce Filler, Max Hinson
    6	* @version 0.4
    7	*/
    8	public class Contact {
    9		private String name;
   10		private String nickname;
   11		
   12		/**
   13		 * Default constructor
   14		 */
   15		public Contact(){
   16			name = "";
   17			nickname = "";
   18		}
   19		
   20		/**
   21		 * Overloaded constructor that takes the user's name
   22		 * @param name
   23		 */
   24		public Contact(String name){
   25			this.name = name;
   26		
   27		}
   28		
   29		/**
   30		 * Set user's name
   31		 * @param name the user's name
   32		 */
   33		public void setName(String name){
   34			this.name = name;
   35		}
   36	
   37	
   38		/**
   39		 * Get user's name
   40		 * @return user's name
   41		 */
   42		public String getName(){
   43			return name;
   44		}
   45	
   46	}

















2012-06-08 15:50 src/edu/ucsb/cs56/S12/maxhinson/chatclient/view/ClientWindow.java Page 1


    1	package edu.ucsb.cs56.S12.maxhinson.chatclient.view;
    2	
    3	import java.awt.*;
    4	import java.awt.event.ActionEvent;
    5	import java.awt.event.ActionListener;
    6	import java.awt.event.WindowAdapter;
    7	import java.awt.event.WindowEvent;
    8	import java.awt.event.*;
    9	
   10	import javax.swing.*;
   11	
   12	import edu.ucsb.cs56.S12.maxhinson.chatclient.controller.ClientController;
   13	
   14	/**
   15	 * Represents a JFrame window which has components that are needed for chatting
   16	 * @author Peng Wang, Andro Stotts, Bryce Filler, Max Hinson
   17	 * @version 0.4
   18	 */
   19	public class ClientWindow extends JFrame{
   20	
   21	    private static final long serialVersionUID = 1L;
   22	    private JTextField tfInput;
   23	    private JTextArea taOutput;
   24	    private JTextField tfUsername;
   25	    private JTextField tfNickName;
   26	    private JTextField tfServerIp;
   27	    private JPasswordField pfPassword;
   28	    private JScrollPane spScrollPane;
   29	    private JList listContacts;
   30	    private JLabel lblContact;
   31	    private JLabel lblUserName;
   32	    private JLabel lblNickName;
   33	    private JLabel lblPassword;
   34	    private JLabel lblServerIp;
   35	    private JLabel lblLoginError;
   36	    private JCheckBox soundbox;
   37	    private JButton btConnect;
   38	    private JButton btNickname;
   39	    private static ClientWindow window;
   40	    private ClientController controller;
   41	    private String name;
   42	    private String nickname;
   43	    private String ip;
   44	    private String password;
   45	    private JFrame nicknameWindow;
   46		
   47	    /**
   48	     * Default constructor
   49	     */
   50	    private ClientWindow(){
   51		controller = ClientController.getController();
   52		tfInput = new JTextField();
   53		taOutput = new JTextArea();
   54		spScrollPane = new JScrollPane(taOutput);
   55		taOutput.setLineWrap(true);
   56		taOutput.setWrapStyleWord(true);







2012-06-08 15:50 src/edu/ucsb/cs56/S12/maxhinson/chatclient/view/ClientWindow.java Page 2


   57		taOutput.setEditable(false);
   58		listContacts = new JList(controller.getContacts());
   59		lblContact = new JLabel("Contacts");
   60		lblUserName = new JLabel("Username: ");
   61		lblNickName = new JLabel("New Nickname:");
   62		lblServerIp = new JLabel("Server IP: ");
   63		lblPassword = new JLabel("Password: ");
   64		lblLoginError = new JLabel("");
   65		tfUsername = new JTextField(20);
   66		tfNickName = new JTextField(20);
   67		tfServerIp = new JTextField(20);
   68		pfPassword = new JPasswordField(20);
   69		//default connection
   70		tfServerIp.setText("127.0.0.1");
   71		soundbox = new JCheckBox("Play Sounds");
   72		btConnect = new JButton("Connect to Server");
   73		btNickname = new JButton("Accept");
   74		name = "";
   75		password = "";
   76		ip = "";
   77	    }
   78		
   79	    /**
   80	     * get the instance of the ClientWindow object
   81	     * @return instance of the ClientWindow 
   82	     */
   83	    public static ClientWindow getWindow(){
   84		if(window == null){
   85		    window = new ClientWindow();
   86		}
   87		return window;
   88	    }
   89		
   90	    /**
   91	     * Creates the login window
   92	     */
   93	    public void launchLoginWindow(){
   94		this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
   95		this.setLocation(100, 100);
   96		this.setSize(300, 270);
   97		this.setTitle("Chatting Client");
   98		this.setLayout(new FlowLayout());
   99	
  100		this.getContentPane().add(lblUserName);
  101		this.getContentPane().add(tfUsername);
  102		this.getContentPane().add(lblPassword);
  103		this.getContentPane().add(pfPassword);
  104		this.getContentPane().add(lblServerIp);
  105		this.getContentPane().add(tfServerIp);
  106		this.getContentPane().add(lblLoginError);
  107		this.getContentPane().add(btConnect);
  108		btConnect.addActionListener(new MyButtonListener());
  109		btConnect.setSelected(true);
  110		this.setVisible(true);
  111	    }
  112		







2012-06-08 15:50 src/edu/ucsb/cs56/S12/maxhinson/chatclient/view/ClientWindow.java Page 3


  113	    /**
  114	     * Creates the chat window
  115	     */
  116	    public void launchChatWindow(){
  117		//add window listener for closing window
  118		//which tells the server to broadcast the message
  119		//that this client is going offline
  120		this.addWindowListener(new WindowAdapter(){
  121			public void windowClosing(WindowEvent we){
  122			    controller.sendMsg2Server(name + "&Broadcast:1003");
  123			    System.exit(0);
  124			}
  125		    });
  126		this.getContentPane().removeAll();
  127		this.setLayout(new BorderLayout());
  128		this.setSize(600, 400);
  129		this.setTitle("Chatting Client-" + name);
  130		JPanel leftPanel = new JPanel();
  131		JPanel rightPanel = new JPanel();
  132		JPanel menuPanel = new JPanel();
  133		
  134		menuPanel.setBorder(BorderFactory.createLineBorder(Color.black));
  135		menuPanel.setLayout(new FlowLayout());
  136		menuPanel.add(soundbox, BorderLayout.NORTH);
  137	
  138		rightPanel.setBorder(BorderFactory.createLineBorder(Color.black));
  139		rightPanel.setLayout(new BorderLayout());
  140		rightPanel.add(spScrollPane, BorderLayout.CENTER);
  141		rightPanel.add(tfInput, BorderLayout.SOUTH);
  142			
  143		leftPanel.setBorder(BorderFactory.createLineBorder(Color.black));
  144		leftPanel.setLayout(new BorderLayout());
  145		leftPanel.add(lblContact, BorderLayout.NORTH);
  146		leftPanel.add(listContacts, BorderLayout.CENTER);
  147	
  148		JButton nickName = new JButton("Change nickname");
  149		leftPanel.add(nickName, BorderLayout.SOUTH);
  150			
  151		listContacts.setSelectedIndex(0);
  152	
  153			
  154		this.getContentPane().add(leftPanel, BorderLayout.WEST);
  155		this.getContentPane().add(rightPanel, BorderLayout.CENTER);
  156		this.getContentPane().add(menuPanel, BorderLayout.NORTH);
  157		this.repaint();
  158		tfInput.addActionListener(new InputListener());
  159		nickName.addActionListener(new MyButtonListener2());
  160			
  161		soundbox.addItemListener(new CheckListener());
  162		soundbox.setSelected(true);
  163	    }
  164	    /**
  165	     * Creates the name change window
  166	     */
  167	    public void launchChangeWindow(){
  168		//creates the window that appears







2012-06-08 15:50 src/edu/ucsb/cs56/S12/maxhinson/chatclient/view/ClientWindow.java Page 4


  169		//upon requesting to change user name
  170		nicknameWindow = new JFrame();
  171		nicknameWindow.setLocation(100, 100);
  172		nicknameWindow.setSize(300, 125);
  173		nicknameWindow.setDefaultCloseOperation(EXIT_ON_CLOSE);
  174		nicknameWindow.setTitle("Set Nickname");
  175		nicknameWindow.setLayout(new FlowLayout());
  176		nicknameWindow.getContentPane().add(lblNickName);
  177		nicknameWindow.getContentPane().add(tfNickName);
  178		nicknameWindow.getContentPane().add(btNickname);
  179		nicknameWindow.setVisible(true);
  180		btNickname.addActionListener(new InputListener2());
  181		tfNickName.addKeyListener(new InputListener2());
  182	    }
  183			
  184		
  185	    /**
  186	     * Get the message display component
  187	     * @return the text area which displays the message
  188	     */
  189	    public JTextArea getTaOutput(){
  190		return taOutput;
  191	    }
  192		
  193	    /**
  194	     * Get the contact list
  195	     * @return the list component of the client window
  196	     */
  197	    public JList getContactList(){
  198		return listContacts;
  199	    }
  200		
  201	    /**
  202	     * Handles actions when buttons are clicked
  203	     * @author Bryce Filler and Max Hinson
  204	     * @version 0.4
  205	     */
  206	    class MyButtonListener2 implements ActionListener{
  207		private ClientWindow window2 = ClientWindow.getWindow();
  208		public void actionPerformed(ActionEvent e){
  209	
  210		    window2.launchChangeWindow();
  211	
  212		}
  213	    }
  214				
  215	/**
  216	     * Handles actions when buttons are clicked
  217	     * @author Peng Wang with Andro Stotts
  218	     * @version 0.4
  219	     */		
  220	    class MyButtonListener implements ActionListener{
  221		private ClientWindow window = ClientWindow.getWindow();
  222		public void actionPerformed(ActionEvent e) {			
  223		    name = tfUsername.getText();
  224		    password = pfPassword.getText();







2012-06-08 15:50 src/edu/ucsb/cs56/S12/maxhinson/chatclient/view/ClientWindow.java Page 5


  225		    boolean tester = false;
  226		    if (name.isEmpty()) 
  227			tester = true;
  228		    else 
  229			tester = false;
  230		    boolean tester2 = false;
  231		    if (password.isEmpty()) 
  232			tester2 = true;
  233		    else 
  234			tester2 = false;
  235		
  236		    
  237		
  238		    password = new String(pfPassword.getPassword());
  239		    ip = tfServerIp.getText();
  240				
  241		    int result; 
  242		    if (tester && !tester2) 
  243			result = 3;
  244	
  245		    else if (!tester && tester2)
  246			result = 4;
  247	
  248		    else if (tester && tester2)
  249			result = 5;
  250	
  251		    else 
  252			result = controller.connectServer(ip, name, password);
  253	
  254		    if(result == 0)
  255			window.launchChatWindow();
  256				
  257		    else{
  258			
  259			pfPassword.setText("");
  260			lblLoginError.setForeground(Color.RED);
  261			if(result == 1){
  262			    tfUsername.setText("");	
  263			    lblLoginError.setText("Wrong username or password");
  264			}
  265			else if(result == 2){
  266			    tfUsername.setText("");	
  267			    lblLoginError.setText("This user has logged in already");
  268			}
  269		        else if(result == 3){
  270			    tfUsername.setText("");
  271			    lblLoginError.setText("No name was entered");
  272			}
  273			else if(result == 4){
  274			    tfUsername.setText("");
  275			    lblLoginError.setText("No password entered");
  276			}
  277			else if(result == 5){
  278			    tfUsername.setText("");
  279			    lblLoginError.setText("Please enter login information");
  280			}







2012-06-08 15:50 src/edu/ucsb/cs56/S12/maxhinson/chatclient/view/ClientWindow.java Page 6


  281			else if(result == 9){
  282			    tfUsername.setText("");	
  283			    lblLoginError.setText("Server is not available");
  284			}
  285			else{
  286			    tfServerIp.setText("");
  287			    lblLoginError.setText("Server unavailable on this IP address");
  288			}
  289		      }
  290			window.getContentPane().repaint();
  291		    }
  292	    }	
  293	    
  294	    /**
  295	     * Handles checkbox that toggles sound
  296	     * @author Bryce Filler and Max Hinson
  297	     * @version 0.4
  298	     */
  299	    class CheckListener implements ItemListener {
  300	
  301		public CheckListener(){};
  302	
  303		public void itemStateChanged(ItemEvent e) {
  304		    Object source = e.getItemSelectable();
  305		    
  306		    if (e.getStateChange() == ItemEvent.DESELECTED)
  307			controller.setSound(false);
  308		    else
  309			controller.setSound(true);
  310		}
  311	    }	
  312	
  313	    /**
  314	     * Handles actions when name is changed
  315	     * @author Bryce Filler and Max Hinson
  316	     * @version 0.4
  317	     */
  318	    class InputListener2 implements ActionListener, KeyListener{
  319		//input listener for name change
  320		public void actionPerformed(ActionEvent e) {
  321		    String text = tfNickName.getText().trim();
  322		    if(!text.isEmpty())
  323			{
  324			    tfNickName.setText("");
  325			    controller.sendMsg2Server(name + "(NAME_CHANGE): " + text + "&" + "NAME_CHANGE" + ":1001");
  326			    nicknameWindow.dispose();
  327	                }
  328		}
  329		public void keyTyped(KeyEvent e) {}
  330	        public void keyReleased(KeyEvent e) {}
  331		public void keyPressed(KeyEvent e) {
  332		    int key = e.getKeyCode();
  333		    if (key == KeyEvent.VK_ENTER) {
  334		    String text = tfNickName.getText().trim();
  335		    if(!text.isEmpty())
  336			{







2012-06-08 15:50 src/edu/ucsb/cs56/S12/maxhinson/chatclient/view/ClientWindow.java Page 7


  337			    tfNickName.setText("");
  338			    controller.sendMsg2Server(name + "(NAME_CHANGE): " + text + "&" + "NAME_CHANGE" + ":1001");
  339			    nicknameWindow.dispose();
  340	                }
  341			}
  342			
  343		}
  344	    }
  345		
  346	    /**
  347	     * Handles the action when user clicks enter on keyboard
  348	     * @author Peng Wang with Andro Stotts
  349	     * @version 0.4
  350	     */
  351	    class InputListener implements ActionListener{
  352		public void actionPerformed(ActionEvent e) {
  353		    if(listContacts.isSelectionEmpty()){
  354			taOutput.append("***PLEASE SELECT A CONTACT PERSON FIRST, THEN SENT YOUR MESSAGE***\n");
  355		    }
  356		    else{
  357			String text = tfInput.getText().trim();
  358			tfInput.setText("");
  359			nickname = controller.getNickname();
  360			if(!listContacts.getSelectedValue().equals("Broadcast"))
  361			    controller.sendMsg2Server(nickname + ": " + text + "&" + listContacts.getSelectedValue() + ":1001");
  362			else
  363			    controller.sendMsg2Server(nickname + "(Broadcast): " + text + "&" + listContacts.getSelectedValue() + ":1001");
  364		    }
  365		}	
  366	    }
  367	}
  368	































2012-06-01 15:30 src/edu/ucsb/cs56/S12/maxhinson/chatserver/controller/RunServer.java Page 1


    1	package edu.ucsb.cs56.S12.maxhinson.chatserver.controller;
    2	
    3	import edu.ucsb.cs56.S12.maxhinson.chatserver.view.ServerWindow;
    4	
    5	/**
    6	 * Application class represent the entrance of the program
    7	 * @author Peng Wang with Andro Stotts
    8	 * @version 0.4
    9	 */
   10	public class RunServer{
   11		public static void main(String[] agrs){
   12			//create the application window
   13			ServerWindow window = ServerWindow.getWindow();
   14			window.launchWindow();		
   15		}
   16	}















































2012-06-01 15:30 src/edu/ucsb/cs56/S12/maxhinson/chatserver/controller/ServerController.java Page 1


    1	package edu.ucsb.cs56.S12.maxhinson.chatserver.controller;
    2	
    3	import edu.ucsb.cs56.S12.maxhinson.chatserver.model.Server;
    4	import edu.ucsb.cs56.S12.maxhinson.chatserver.view.ServerWindow;
    5	
    6	/**
    7	 * Represent the controller which handles the communication between server view and server model
    8	 * @author Peng Wang, Andro Stotts, Max Hinson, and Bryce Filler
    9	 * @version 0.2
   10	 */
   11	public class ServerController{
   12		private Server server;
   13		private static ServerController controller;
   14		
   15		/**
   16		 * Default constructor
   17		 */
   18		private ServerController(){
   19			server = Server.getServer();
   20		}
   21		
   22		/**
   23		 * Gets the instance of ServerController class
   24		 * @return instance of ServerController
   25		 */
   26		public static ServerController getController(){
   27			if(controller == null)
   28				controller = new ServerController();
   29			return controller;
   30		}
   31		
   32		/**
   33		 * Starts the server
   34		 * @return server message
   35		 */
   36		public String startServer(){	
   37			server.start();
   38			return server.getServerMsg();
   39		}
   40		
   41		/**
   42		 * Closes the server
   43		 * @return server message
   44		 */
   45		public String closeServer(){
   46			server.close();
   47			return server.getServerMsg();
   48		}
   49		
   50		/**
   51		 * Kick user out of the server
   52		 * @param userName User's name
   53		 * @return server message
   54		 */
   55		public String kickUser(String userName){
   56			server.kick(userName);







2012-06-01 15:30 src/edu/ucsb/cs56/S12/maxhinson/chatserver/controller/ServerController.java Page 2


   57			return server.getServerMsg();
   58		}
   59		
   60		/**
   61		 * Gets server status
   62		 * @return true when server is on, false when server is down
   63		 */
   64		public boolean getServerStatus(){
   65			return server.getServerStatus();
   66		}
   67		
   68		/**
   69		 * Displays the message onto the server window
   70		 * @param s
   71		 */
   72		public void displayMsg(String s){
   73			ServerWindow.getWindow().getTaConsole().append(s);
   74		}
   75		
   76		/**
   77		 * Update the list of users
   78		 * @param list array of strings which contains users' names
   79		 */
   80		public void updateList(String[] list){
   81			ServerWindow.getWindow().getUserList().setListData(list);
   82			//ServerWindow.getWindow().repaint();
   83		}
   84	}



































2012-06-01 15:30 src/edu/ucsb/cs56/S12/maxhinson/chatserver/junit/ServerTest.java Page 1


    1	package edu.ucsb.cs56.S12.maxhinson.chatserver.junit;
    2	
    3	import static org.junit.Assert.*;
    4	
    5	import org.junit.Test;
    6	
    7	import edu.ucsb.cs56.S12.maxhinson.chatserver.model.Server;
    8	
    9	public class ServerTest {
   10	
   11		
   12		@Test
   13		public void testGetServer() {
   14			Server server = Server.getServer();
   15			assertEquals(Server.class, server.getClass());
   16		}
   17	
   18		@Test
   19		public void testStart() {
   20			Server server = Server.getServer();
   21			server.start();
   22			assertEquals("------------------------------------------SERVER USAGE-----------------------------------------------\n" +
   23						 "             We currently have a FAKE database with only the users listed below:     \n" +
   24						 "                     Username: Peng Wang        Nickname: peng     Password: 123abc      \n" +
   25						 "                     Username: Andro Stotts     Nickname: andro    Password: abc123      \n" +
   26						 "                     Username: Phillip Conrad   Nickname: phill    Password: 9876543     \n" +
   27						 "                     Username: Steve Jobs       Nickname: steven   Password: 2as134      \n" +
   28					 	 "                     Username: Bill Gates       Nickname: billy    Password: idu?e3e     \n" +
   29					 	 "                     Username: Orange Juice     Nickname: oj       Password: orangejuice \n" +
   30				                 "                     Username: Max Hinson       Nickname: max      Password: password    \n" +
   31	                                         "                     Username: Bryce Filler     Nickname: bry      Password: bryce       \n" +
   32					 	 "-----------------------------------------------------------------------------------------------------\n" +
   33					 	 "      NOTE: PLEASE USE ABOVE ACCOUNTS TO LOGIN OUR CLIENT APPLICATION FOR TESTING PURPOSES           \n" +
   34					 	 "-----------------------------------------------------------------------------------------------------\n" +
   35					 	 "[Server Message] " + "Server has been started and waiting for client connections\n", server.getServerMsg());
   36		}
   37	
   38		@Test
   39		public void testClose() {
   40			Server server = Server.getServer();
   41			server.close();
   42			assertEquals("[Server Message] " + "Server shut down successfully\n", server.getServerMsg());
   43		}
   44	
   45		@Test
   46		public void testGetServerStatus() {
   47			Server server = Server.getServer();
   48			assertEquals(false, server.getServerStatus());
   49		}
   50	
   51		@Test
   52		public void testGetServerMsg() {
   53			Server server = Server.getServer();
   54			assertEquals("connection failed\n", server.getServerMsg());
   55		}
   56	







2012-06-01 15:30 src/edu/ucsb/cs56/S12/maxhinson/chatserver/junit/ServerTest.java Page 2


   57	}






























































2012-06-01 15:30 src/edu/ucsb/cs56/S12/maxhinson/chatserver/junit/UserTest.java Page 1


    1	package edu.ucsb.cs56.S12.maxhinson.chatserver.junit;
    2	
    3	import static org.junit.Assert.*;
    4	
    5	import java.util.ArrayList;
    6	
    7	import org.junit.Test;
    8	
    9	import edu.ucsb.cs56.S12.maxhinson.chatserver.model.User;
   10	
   11	public class UserTest {
   12	
   13	    User u = new User("Tester", "test", "123456");
   14		
   15		
   16	    @Test
   17		public void testGetContactList() {
   18		u.addToContactList(new User("Peng Wang", "peng", "abc123"));
   19		u.addToContactList(new User("Andro Stotts", "andro", "123abc"));
   20		ArrayList<User> list = u.getContactList();
   21		assertEquals(2, list.size());
   22	    }
   23	
   24	    @Test
   25		public void testGetName() {
   26		assertEquals("Tester", u.getName());
   27	    }
   28	
   29	  @Test
   30		public void testGetNickname() {
   31		assertEquals("test", u.getNickname());
   32	    }
   33	
   34	    @Test
   35		public void testGetPassword() {
   36		assertEquals("123456", u.getPassword());
   37	    }
   38	}

























2012-06-01 15:30 src/edu/ucsb/cs56/S12/maxhinson/chatserver/model/BlankNameException.java Page 1


    1	package edu.ucsb.cs56.S12.maxhinson.chatserver.model;
    2	
    3	public class BlankNameException extends Exception {
    4		
    5	}


























































2012-06-08 16:14 src/edu/ucsb/cs56/S12/maxhinson/chatserver/model/Server.java Page 1


    1	package edu.ucsb.cs56.S12.maxhinson.chatserver.model;
    2	import edu.ucsb.cs56.S12.maxhinson.chatserver.controller.ServerController;
    3	
    4	import java.io.DataInputStream;
    5	import java.io.DataOutputStream;
    6	import java.io.IOException;
    7	import java.net.ServerSocket;
    8	import java.net.Socket;
    9	import java.net.SocketAddress;
   10	import java.util.ArrayList;
   11	
   12	/*
   13	 *SPECIAL CODE used by system to indicate the type of message
   14	 *   MESSAGE FORMAT (everything inside <> is variable)
   15	 *
   16	 *1001-regular one-to-one or broadcast message
   17	 *   [Client Message] <sender's nickname>: <message>&<recipient's nickname>(Online):1001
   18	 *   or
   19	 *   [Client Message] <sender's nickname>(Broadcast): <message>&Broadcast:1001
   20	 *
   21	 *1002-let contacts know that someone has logged on
   22	 *   <nickname of online user>&1002
   23	 *
   24	 *1003-let contacts know that someone has logged off
   25	 *   <nickname of offline user>&1003
   26	 *
   27	 *1004-send the client the user's contact list
   28	 *   <nickname1:nickname2:nickname3(Online):nickname4...>&1004
   29	 *
   30	 *1005-user has logged in already
   31	 *
   32	 *
   33	 *1006-tell other clients that someone has changed their nickname
   34	 *   <oldnickname>:<newnickname>&1006
   35	 *
   36	 *1007-tell the client its new nickname
   37	 *   <newnickname>&1007
   38	 */
   39	
   40	/**
   41	 * Represents the server model
   42	 * @author Peng Wang, Andro Stotts, Max Hinson, and Bryce Filler
   43	 * @version 0.5
   44	 */
   45	public class Server{
   46	    private final int port = 8888;
   47	    private static Server server = null;
   48	    private boolean isServerStart;
   49	    private ServerSocket ss;
   50	
   51	    private String serverMsg;
   52	    private String serverMsgPrefix;
   53	    private String clientMsgPrefix;
   54	    private String [] clientsOnline;
   55	    private ArrayList<Client> clients;
   56	    private ArrayList<User> database;







2012-06-08 16:14 src/edu/ucsb/cs56/S12/maxhinson/chatserver/model/Server.java Page 2


   57	
   58	    private String usage = "------------------------------------------SERVER USAGE-----------------------------------------------\n" +
   59		"             We currently have a FAKE database with only the users listed below:         \n" +
   60		"                     Username: Peng Wang        Nickname: peng     Password: 123abc      \n" +
   61		"                     Username: Andro Stotts     Nickname: andro    Password: abc123      \n" +
   62		"                     Username: Phillip Conrad   Nickname: phill    Password: 9876543     \n" +
   63		"                     Username: Steve Jobs       Nickname: steven   Password: 2as134      \n" +
   64		"                     Username: Bill Gates       Nickname: billy    Password: idu?e3e     \n" +
   65		"                     Username: Orange Juice     Nickname: oj       Password: orangejuice \n" +
   66		"                     Username: Max Hinson       Nickname: max      Password: password    \n" +
   67		"                     Username: Bryce Filler     Nickname: bry      Password: bryce       \n" +
   68		"-----------------------------------------------------------------------------------------------------\n" +
   69		"      NOTE: PLEASE USE ABOVE ACCOUNTS TO LOGIN OUR CLIENT APPLICATION FOR TESTING PURPOSES           \n" +
   70		"-----------------------------------------------------------------------------------------------------\n";
   71		
   72	    /**
   73	     * Default constructor
   74	     */
   75	    private Server(){
   76		clientsOnline = null;
   77		isServerStart = false;
   78		ss = null;
   79		serverMsg = "";
   80		serverMsgPrefix = "[Server Message] ";
   81		clientMsgPrefix = "[Client Message] ";
   82		clients = new ArrayList<Client>();
   83			
   84		//make our own fake database
   85		database = new ArrayList<User>();
   86		User peng = new User("Peng Wang", "peng", "123abc");		
   87		User andro = new User("Andro Stotts", "andro", "abc123");
   88		User philp = new User("Phillip Conrad", "phill", "9876543");
   89		User bill = new User("Bill Gates", "billy", "idu?e3e");
   90		User steve = new User("Steve Jobs", "steven", "2as134");
   91		User orange = new User("Orange Juice ", "oj", "orangejuice");
   92		User max = new User("Max Hinson", "max", "password");
   93		User bryce = new User("Bryce Filler", "bry", "bryce");
   94		peng.addToContactList(andro);
   95		peng.addToContactList(philp);
   96		peng.addToContactList(steve);
   97		peng.addToContactList(bill);
   98		andro.addToContactList(peng);
   99		andro.addToContactList(bill);
  100		andro.addToContactList(orange);
  101		philp.addToContactList(peng);
  102		philp.addToContactList(andro);
  103		philp.addToContactList(max);
  104		steve.addToContactList(orange);
  105		steve.addToContactList(bill);
  106		steve.addToContactList(max);
  107		max.addToContactList(peng);
  108		max.addToContactList(andro);
  109		max.addToContactList(philp);
  110		max.addToContactList(bill);
  111		max.addToContactList(steve);
  112		max.addToContactList(orange);







2012-06-08 16:14 src/edu/ucsb/cs56/S12/maxhinson/chatserver/model/Server.java Page 3


  113		max.addToContactList(bryce);
  114		bryce.addToContactList(max);
  115		database.add(peng);
  116		database.add(andro);
  117		database.add(philp);
  118		database.add(bill);
  119		database.add(steve);
  120		database.add(orange);
  121		database.add(max);
  122		database.add(bryce);	
  123	    }
  124		
  125	    /**
  126	     * Gets the server object
  127	     * @return the server object
  128	     */
  129	    public static Server getServer(){
  130		if(server == null)
  131		    server = new Server();
  132		return server;
  133	    }
  134		
  135	    /**
  136	     * start the server
  137	     */
  138	    public void start(){
  139		try{
  140		    //set the server's port and create a new thread that accepts connections
  141		    ss = new ServerSocket(port);
  142		    isServerStart = true;
  143		    Connection c = new Connection();
  144		    new Thread(c).start();
  145				
  146		    //set the server message
  147		    serverMsg = usage + serverMsgPrefix + "Server has been started and waiting for client connections\n";
  148		} catch(IOException ex){
  149		    serverMsg = serverMsgPrefix + "Server started failed, please try to use another port\n";
  150		}
  151	    }
  152		
  153	    /**
  154	     * close the server
  155	     */
  156	    public void close(){
  157		try {
  158		    //close the server socket and set the server status to be false
  159		    ss.close();			
  160		    isServerStart = false;
  161				
  162		    //set the server message
  163		    serverMsg = serverMsgPrefix + "Server shut down successfully\n";
  164		} catch (IOException e) {
  165		    serverMsg = serverMsgPrefix + "Problem occured when server shutting down\n";
  166		}
  167	    }
  168		







2012-06-08 16:14 src/edu/ucsb/cs56/S12/maxhinson/chatserver/model/Server.java Page 4


  169	    /**
  170	     * Kick the user out of the server
  171	     * @param userName user's name
  172	     */
  173	    public void kick(String userName){
  174		String nickname = "";
  175		//find the client that you want to kick
  176		for(int i = 0; i < clients.size(); i++){
  177		    if(clients.get(i).getName().equals(userName)){
  178			nickname = clients.get(i).getNickname();
  179			//Removes client login privileges
  180			clients.get(i).setIsAuthorized(false);
  181			try {
  182			//closes the socket
  183			    clients.get(i).s.close();
  184			} catch (IOException e) {
  185			    serverMsg = serverMsgPrefix + "Kicking user failed\n";
  186			}
  187			serverMsg = serverMsgPrefix + userName + " has been kicked\n";
  188		    }
  189		}
  190		//goes through each contact and removes deauthorized account from their contact lists
  191		for(Client c : clients){
  192		    if(!c.getNickname().equals(nickname))
  193			c.sendMsg(nickname + "&1003");
  194		}
  195	    }
  196		
  197	    /**
  198	     * Get server status
  199	     * @return true when server is on, otherwise false
  200	     */
  201	    public boolean getServerStatus(){
  202		return isServerStart;
  203	    }
  204		
  205	    /**
  206	     * Gets the server message
  207	     * @return server message
  208	     */
  209	    public String getServerMsg(){
  210		return serverMsg;
  211	    }
  212	
  213	    /**
  214	     * inner class Client only provide service to the outer class
  215	     * @author Peng Wang, Andro Stotts, Max Hinson, and Bryce Filler
  216	     * @version 0.5
  217	     */
  218	    class Client extends User implements Runnable{
  219		private Socket s;
  220		private SocketAddress ip;
  221		private boolean isClientConnect;
  222		private boolean isAuthorized = false;
  223		private DataInputStream dis = null;
  224		private DataOutputStream dos = null;







2012-06-08 16:14 src/edu/ucsb/cs56/S12/maxhinson/chatserver/model/Server.java Page 5


  225		private ServerController controller = ServerController.getController();
  226		/**
  227		 * Constructor initialize data for a client
  228		 * @param s client's socket
  229		 */
  230		public Client(Socket s){
  231		    super("", "", "");
  232		    //save the client socket
  233		    this.s = s;
  234				
  235		    //get the client ip address
  236		    ip = s.getRemoteSocketAddress();
  237	
  238		    try {
  239			//get input and output stream
  240			this.dis = new DataInputStream(s.getInputStream());
  241			this.dos = new DataOutputStream(s.getOutputStream());
  242					
  243			//set the connection status to be true
  244			this.isClientConnect = true;
  245					
  246			//set the connection message
  247			controller.displayMsg(serverMsgPrefix + "A client has connected from IP: " + ip + '\n');
  248		    } catch (IOException e) {
  249			e.printStackTrace();
  250		    } 
  251		}
  252			
  253		/**
  254		 * parse message send by the client
  255		 * @param s message send by the client
  256		 * @return array of strings that contains message, contact person, and special code
  257		 */
  258		public String[] parseMsg(String s){
  259		    int index = s.lastIndexOf("&");
  260		    String msg = s.substring(0, index);
  261		    String c = s.substring(index+1, s.length());
  262		    String[] cmd = c.split(":");
  263		    String[] str = {msg, cmd[0], cmd[1]};
  264		    return str;
  265		}
  266			
  267		/**
  268		 * Update user list
  269		 */
  270		public void updateWhoIsOnline(){
  271		    //update who's online (server side)
  272		    clientsOnline = new String[clients.size()];
  273		    for(int i=0; i < clients.size();i++){
  274			clientsOnline[i] = clients.get(i).getName();
  275		    }
  276		    controller.updateList(clientsOnline);
  277		}
  278			
  279		/**
  280		 * broadcast message to all users who are current online







2012-06-08 16:14 src/edu/ucsb/cs56/S12/maxhinson/chatserver/model/Server.java Page 6


  281		 * @param strs message after parsing
  282		 */
  283		public void broadcast2all(String[] strs){
  284		    for(Client c : clients){
  285			c.sendMsg(strs[0] + "&" + strs[2]);
  286		    }
  287		}
  288			
  289		/**
  290		 * broadcast message to one particular person who is current online
  291		 * @param strs message after parsing
  292		 */
  293		public void broadcast2one(String[] strs){
  294		    boolean isOnline = false;
  295		    this.sendMsg(strs[0] + "&" + strs[2]);
  296		    for(Client c : clients){
  297			if(strs[1].equals(c.getNickname()+"(Online)")){
  298			    c.sendMsg(strs[0] + "&" + strs[2]);
  299			    isOnline = true;
  300			    break;
  301			}
  302		    }
  303		    if(!isOnline){
  304			this.sendMsg("***THE USER YOU ARE TRYING TO SENT MESSAGE TO IS NOT ONLINE***&" + strs[2]);
  305		    }	
  306		}
  307	
  308		/**
  309		 * change a user's nickname
  310		 * @param strs message after parsing
  311		 */
  312		public void changeNickname(String[] strs){
  313		    //input string format (everything inside <> is variable):
  314		    //<username>(NAME_CHANGE): <newnickname>
  315	
  316		    //split input to get user's data
  317		    String[] strings1 = strs[0].split("\\(");
  318		    String[] strings2 = strs[0].split(": ");
  319		    String username = strings1[0];
  320		    String oldNickname = "";
  321		    String newNickname = strings2[1];
  322	
  323		    //search the server's client list for the one that is changing its nickname
  324		    for(Client c : clients){
  325			if(c.getName().equals(username))
  326			    {
  327				oldNickname = c.getNickname();
  328	
  329				//update server's database and send message to client to change its nickname 
  330				if (c.sendMsg(newNickname + "&1007") == 0){
  331				c.setNickname(newNickname);
  332				//display messages on the server and client about the nickname change
  333				controller.displayMsg(serverMsgPrefix + username + "'s nickname has been changed from " + oldNickname + " to " + newNickname);
  334				c.sendMsg("Your nickname has been changed from " + oldNickname + " to " + newNickname + "&1001");
  335				}
  336				else 







2012-06-08 16:14 src/edu/ucsb/cs56/S12/maxhinson/chatserver/model/Server.java Page 7


  337				c.sendMsg("Nickname change failed" + "&1001");
  338				break;
  339			    }
  340		    }
  341	
  342		    //notify all other contacts that the user has changed their nickname
  343		    for(Client c : clients)
  344			if(!c.getName().equals(username))
  345			    c.sendMsg(oldNickname + ":" + newNickname + "&1006");
  346	
  347		    //update the user's new nickname in the database
  348		    for(User u : database)
  349			if(u.getName().equals(username))
  350			    u.setNickname(newNickname);
  351		}
  352			
  353		/**
  354		 * send message to the client
  355		   @return returns 1 or 0 depending upon whether or not an exception has been thrown.
  356		 * @param msg message to send
  357		 */
  358		public int sendMsg(String msg){
  359		    try {
  360			dos.writeUTF(msg);
  361		        return 0;			
  362		    } catch (IOException e) {
  363			controller.displayMsg(serverMsgPrefix + " server send message to the client failed\n");
  364		        return 1;
  365		    }
  366		}
  367			
  368		/**
  369		 * Gets the contact list for the current client
  370		 * @return contact list (eg. Peng Wang:Andro Stotts:Phillp Conrad)
  371		 */
  372		public String getContacts(){
  373		    String list = "";
  374		    for(int i = 0; i < this.getContactList().size(); i++){
  375			list = list + this.getContactList().get(i).getNickname();
  376			for(int j = 0; j < clients.size(); j++){
  377			    if(this.getContactList().get(i).getNickname().equals(clients.get(j).getNickname())){
  378				list += "(Online)";
  379			    }			
  380			}
  381			if(i == this.getContactList().size())
  382			    break;
  383			else
  384			    list += ":";
  385		    }
  386		    return list;
  387		}
  388			
  389		/**
  390		 * Sets the authorization of the cilent
  391		 * @param b true when client is authorized, otherwise false
  392		 */







2012-06-08 16:14 src/edu/ucsb/cs56/S12/maxhinson/chatserver/model/Server.java Page 8


  393		public void setIsAuthorized(boolean b){
  394		    isAuthorized = b;
  395		}
  396	
  397		/**
  398		 * Waits for a message, and broadcasts it.
  399		 * On failure it removes client from list and it closes all streams
  400		 */
  401		public void run() {
  402		    try{
  403			//when the client is not authorized, check the identity 
  404			//if the identity checking success, then start to broadcasting message
  405			//if the identity checking failed, return a string with nothing and throws an exception
  406			while(!isAuthorized){
  407			    //read the username and password
  408			    String identity = dis.readUTF();
  409			    String[] identities = identity.split("&");
  410			    controller.displayMsg(serverMsgPrefix + "User trying to login with Username: " + identities[0] + " Password: " + identities[1] + '\n');
  411			    for(Client c : clients){
  412				if(c.getName().equals(identities[0]) && !(identities[0].isEmpty()))
  413				    throw new UserExistException();
  414	                        else if (identities[0].isEmpty())
  415				    throw new BlankNameException();
  416				
  417	 
  418			    } 
  419			    for(User u : database){
  420				if(u.getName().equals(identities[0])){
  421				    this.setName(u.getName());
  422				    this.setNickname(u.getNickname());
  423				    if(u.getPassword().equals(identities[1])){
  424					//if password is checked, then get the contactlist and sent it back to the client
  425					this.setPassword(u.getPassword());
  426					//send the client its contacts list
  427					this.setContactList(u.getContactList());
  428					String myContactList = getContacts();
  429					this.sendMsg(myContactList + "&1004");
  430					//send the client its nickname
  431					this.sendMsg(u.getNickname() + "&1007");
  432					isAuthorized = true;
  433					break;
  434				    }
  435				}
  436			    }
  437			    if(!isAuthorized){
  438				controller.displayMsg(serverMsgPrefix + "User login failed, wrong username or password\n");
  439				this.sendMsg("Wrong username or password");
  440				throw new Exception();
  441			    }			
  442			}
  443					
  444			///broadcast online notification when a client is online and successfully login
  445			if(isAuthorized){
  446			    controller.displayMsg(serverMsgPrefix + "User login success, " + this.getName() + " (" + this.getNickname() + ") "  + " is online now!\n");
  447			    controller.displayMsg(serverMsgPrefix + "TOTAL # OF CLIENTS: " + clients.size() + '\n');
  448						







2012-06-08 16:14 src/edu/ucsb/cs56/S12/maxhinson/chatserver/model/Server.java Page 9


  449			    //update online list (server side)
  450			    updateWhoIsOnline();
  451						
  452			    //sent online notification to the clients
  453			    for(int i = 0; i < clients.size(); i++){
  454				Client c = clients.get(i);
  455				if(!c.getName().equals(this.getNickname()))
  456				    c.sendMsg(this.getNickname() + "&1002");
  457			    }
  458			}
  459					
  460			while(isClientConnect && isServerStart && isAuthorized){
  461			    //readUTF always waiting unless there is something has been inputed
  462			    String msg = dis.readUTF();
  463			    if (!isServerStart)
  464				throw new Exception();
  465			    controller.displayMsg(clientMsgPrefix + msg + '\n');
  466			    String[] strs = parseMsg(msg);
  467						
  468			    //client going offline
  469			    if(strs[2].equals("1003")){
  470				controller.displayMsg(serverMsgPrefix + this.getName() + " (" + this.getNickname() + ") is trying to logoff and disconnect with the server\n");
  471				broadcast2all(strs);
  472			    }
  473						
  474			    //client doing regular chatting
  475			    else{
  476				//if the client doing broadcasting
  477				if(strs[1].equals("Broadcast")){
  478				    broadcast2all(strs);
  479				}
  480				//the user is requesting a nickname change
  481				else if(strs[1].equals("NAME_CHANGE")){
  482				    changeNickname(strs);
  483				}
  484				//sent to a certain person in the contact list
  485				else{
  486				    broadcast2one(strs);					
  487				}
  488			    }			
  489			}
  490			
  491		    } catch(UserExistException uee){
  492			this.sendMsg("This user has logged in already");
  493			clients.remove(this);
  494			controller.displayMsg(serverMsgPrefix + "User has logged in already!\n");
  495	
  496		    }catch(BlankNameException bl){
  497			this.sendMsg("No name was entered");
  498			clients.remove(this);
  499			controller.displayMsg(serverMsgPrefix + "User Login error!\n");	
  500	
  501		    } catch(Exception e){
  502			//remove the current client from the list on server
  503			if(!isServerStart)
  504			    clients.clear();







2012-06-08 16:14 src/edu/ucsb/cs56/S12/maxhinson/chatserver/model/Server.java Page 10


  505			else{
  506			    clients.remove(this);
  507			    controller.displayMsg(serverMsgPrefix + this.getName() + " (" + this.getNickname() + ") has successfully disconnected\n");
  508			    for(Client c : clients){
  509				if(!c.getNickname().equals(this.getNickname()))
  510				    c.sendMsg(this.getNickname() + "&1003");
  511			    }
  512			}
  513			updateWhoIsOnline();
  514					
  515		    } finally{
  516			try {
  517			    if(dos != null)
  518				dos.close();
  519			    if(dis != null)
  520				dis.close();
  521			    if(s != null)
  522				s.close();	
  523		
  524			} catch (IOException e1) {
  525			    controller.displayMsg("Server is down\n");
  526			}
  527		    }
  528		}
  529	    }
  530		
  531		
  532	    /**
  533	     * Connection class is used for listening new client connections
  534	     * on a separate thread
  535	     * @author Peng Wang with Andro Stotts
  536	     * @version 0.4
  537	     */
  538	    class Connection implements Runnable{
  539		public void run() {
  540		    while(isServerStart){
  541			try {
  542			    Socket s = ss.accept();
  543			    Client client = new Client(s);
  544			    clients.add(client);
  545			    new Thread(client).start();
  546			} catch (IOException e) {
  547			    serverMsg = "Connection failed\n";
  548			}
  549		    }
  550		}
  551	    }
  552	}















2012-06-01 15:30 src/edu/ucsb/cs56/S12/maxhinson/chatserver/model/UserExistException.java Page 1


    1	package edu.ucsb.cs56.S12.maxhinson.chatserver.model;
    2	
    3	public class UserExistException extends Exception {
    4		
    5	}


























































2012-06-01 15:30 src/edu/ucsb/cs56/S12/maxhinson/chatserver/model/User.java Page 1


    1	package edu.ucsb.cs56.S12.maxhinson.chatserver.model;
    2	
    3	import java.util.ArrayList;
    4	
    5	/**
    6	 * User class represent a regular user
    7	 * @author Peng Wang, Andro Stotts, Max Hinson, and Bryce Filler
    8	 * @version 0.5
    9	 */
   10	public class User {
   11	    private String name;
   12	    private String nickname;
   13	    private String password;
   14	    private ArrayList<User> contactList;
   15		
   16	    /**
   17	     * Constructor that takes username and password
   18	     * @param name
   19	     * @param nickname
   20	     * @param password
   21	     */
   22	    public User(String name, String nickname, String password){
   23		setName(name);
   24		setNickname(nickname);
   25		setPassword(password);
   26		contactList = new ArrayList<User>();
   27	    }
   28		
   29	    /**
   30	     * Sets contact list
   31	     * @param list contact list
   32	     */
   33	    public void setContactList(ArrayList<User> list){
   34		contactList = list;
   35	    }
   36		
   37	    /**
   38	     * Add user to the contact list
   39	     * @param u a User object
   40	     */
   41	    public void addToContactList(User u){
   42		contactList.add(u);
   43	    }
   44		
   45	    /**
   46	     * Gets the contact list
   47	     * @return contact list
   48	     */
   49	    public ArrayList<User> getContactList(){
   50		return contactList;
   51	    }
   52		
   53	    /**
   54	     * Gets the name of the user
   55	     * @return user's name
   56	     */







2012-06-01 15:30 src/edu/ucsb/cs56/S12/maxhinson/chatserver/model/User.java Page 2


   57	    public String getName() {
   58		return name;
   59	    }
   60		
   61	    /**
   62	     * Sets the user's name
   63	     * @param name user's name
   64	     */
   65	    public void setName(String name) {
   66		this.name = name;
   67	    }
   68		
   69	    /**
   70	     * Gets the user's nickname
   71	     * @return user's nickname
   72	     */
   73	    public String getNickname() {
   74		return nickname;
   75	    }
   76		
   77	    /**
   78	     * Sets the user's nickname
   79	     * @param nickname user's new nickname
   80	     */
   81	    public void setNickname(String nickname) {
   82		this.nickname = nickname;
   83	    }
   84	
   85	    /**
   86	     * Gets the user's password
   87	     * @return user's password
   88	     */
   89	    public String getPassword() {
   90		return password;
   91	    }
   92		
   93	    /**
   94	     * Sets the user's password
   95	     * @param password user's passwrod
   96	     */
   97	    public void setPassword(String password) {
   98		this.password = password;
   99	    }
  100		
  101		
  102	}

















2012-06-01 15:30 src/edu/ucsb/cs56/S12/maxhinson/chatserver/view/ServerWindow.java Page 1


    1	package edu.ucsb.cs56.S12.maxhinson.chatserver.view;
    2	
    3	import java.awt.BorderLayout;
    4	import java.awt.Color;
    5	import java.awt.TextArea;
    6	import java.awt.event.ActionEvent;
    7	import java.awt.event.ActionListener;
    8	import javax.swing.*;
    9	
   10	import edu.ucsb.cs56.S12.maxhinson.chatserver.controller.ServerController;
   11	
   12	/**
   13	 * Represents a JFrame window of a server
   14	 * @author Peng Wang, Andro Stotts, Max Hinson, and Bryce Filler
   15	 * @version 0.5
   16	 */
   17	public class ServerWindow extends JFrame{
   18	
   19	    private static final long serialVersionUID = 1L;
   20	    private JButton btStart;
   21	    private JButton btClose;
   22	    private JButton btKick;
   23	    private TextArea taConsole;
   24	    private static ServerWindow window;
   25	    private ServerController controller;
   26	    private JList userList;
   27	    private JLabel lblContact;
   28	
   29	    /**
   30	     * Default constructor
   31	     */
   32	    private ServerWindow(){
   33		btStart = new JButton("Start Server");
   34		btClose = new JButton("Close Server");
   35		btKick = new JButton("Kick User");
   36		userList = new JList();
   37		taConsole = new TextArea();
   38		lblContact = new JLabel("Users Online");
   39		//get an instance of controller
   40		controller = ServerController.getController();
   41	    }
   42		
   43	    /**
   44	     * Gets the ServerWindow object
   45	     * @return instance of ServerWindow
   46	     */
   47	    public static ServerWindow getWindow(){
   48		if(window == null)
   49		    window = new ServerWindow();
   50		return window;
   51	    }
   52		
   53	    /**
   54	     * Creates the server window
   55	     */
   56	    public void launchWindow(){







2012-06-01 15:30 src/edu/ucsb/cs56/S12/maxhinson/chatserver/view/ServerWindow.java Page 2


   57		this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
   58		this.setLocation(100, 100);
   59		this.setSize(800, 600);
   60		this.setTitle("Chatting Server");
   61		JPanel rightPanel = new JPanel();
   62		JPanel leftPanel = new JPanel();
   63		JPanel buttonPanel = new JPanel();
   64			
   65		rightPanel.setBorder(BorderFactory.createLineBorder(Color.black));
   66		rightPanel.setLayout(new BorderLayout());
   67		buttonPanel.add(btStart);
   68		buttonPanel.add(btClose);
   69		buttonPanel.add(btKick);
   70		btStart.setEnabled(true);
   71		btClose.setEnabled(false);
   72		btKick.setEnabled(false);
   73		taConsole.setEditable(false);
   74		taConsole.setBackground(Color.WHITE);
   75		rightPanel.add(buttonPanel, BorderLayout.NORTH);
   76		rightPanel.add(taConsole,BorderLayout.CENTER);
   77			
   78		leftPanel.setBorder(BorderFactory.createLineBorder(Color.black));
   79		leftPanel.setLayout(new BorderLayout());
   80		leftPanel.add(lblContact,BorderLayout.NORTH);
   81		leftPanel.add(userList,BorderLayout.CENTER);
   82			
   83		this.getContentPane().add(rightPanel, BorderLayout.CENTER);
   84		this.getContentPane().add(leftPanel, BorderLayout.WEST);
   85			
   86		btStart.addActionListener(new myButtonListener());
   87		btClose.addActionListener(new myButtonListener());
   88		btKick.addActionListener(new myButtonListener());
   89		this.setVisible(true);
   90	    }
   91		
   92	    /**
   93	     * Gets the TextArea component of the server window
   94	     * @return TextArea component that represents the server output
   95	     */
   96	    public TextArea getTaConsole(){
   97		return taConsole;
   98	    }
   99		
  100	    /**
  101	     * Gets the JList component of the server window
  102	     * @return JList component that represents the user list
  103	     */
  104	    public JList getUserList(){
  105		return userList;
  106	    }
  107			
  108	    /**
  109	     * Handles the actions when buttons have been clicked on the server window
  110	     * @author Peng Wang, Andro Stotts, Max Hinson, and Bryce Filler
  111	     * @version 0.5
  112	     */







2012-06-01 15:30 src/edu/ucsb/cs56/S12/maxhinson/chatserver/view/ServerWindow.java Page 3


  113	    class myButtonListener implements ActionListener{
  114		public void actionPerformed(ActionEvent e) {
  115		    if(e.getActionCommand() == "Start Server"){
  116			taConsole.setText("");
  117			taConsole.append(controller.startServer());	
  118			btStart.setEnabled(false);
  119			btClose.setEnabled(true);
  120			btKick.setEnabled(true);
  121		    }
  122		    else if (e.getActionCommand() == "Kick User"){
  123			if(userList.getSelectedValue() == null)
  124			    taConsole.append("[Server Message] No user selected to kick\n");
  125			else
  126			    taConsole.append(controller.kickUser((String)userList.getSelectedValue()));
  127		    }
  128		    else{
  129			taConsole.append(controller.closeServer());
  130			btStart.setEnabled(true);
  131			btClose.setEnabled(false);
  132			btKick.setEnabled(false);
  133		    }
  134		}		
  135	    }
  136	}





































